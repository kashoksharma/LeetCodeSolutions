Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example:

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
Explanation:

Surrounded regions shouldnâ€™t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.

/************** C++ Solutions ********************/
class Solution {
    private:
    int numRow;
    int numColumn;
    //set<int, int> visitedIndex;
public:
    void dfsChange(vector<vector<char>>& board, int rowIndex, int columnIndex){
        if(0<=rowIndex < numRow || 0<=columnIndex < numColumn){
            board[rowIndex][columnIndex] = '#';
            /* Check for the close neighbour */
            vector<vector<int>> dir{{0,-1},{-1,0},{0,1},{1,0}};
            for (int i = 0; i < dir.size(); ++i) {
                int dx = rowIndex + dir[i][0], dy = columnIndex + dir[i][1];
                if (dx >= 0 && dx < numRow && dy >= 0 && dy < numColumn && board[dx][dy] == 'O') {
                    dfsChange(board, dx, dy);
                }
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        if (board.empty() || board[0].empty())
            return;
        numRow = board.size();
        numColumn = board[0].size();
        if(numRow < 3 || numColumn < 3){
            // no need to check, as no case of chnage will happen.
            return;
        }
        /* Maintain the visited list */
        /* Check for the 'O' on border line. */
        int traverseIndex = 0;
        for (;traverseIndex < numColumn;traverseIndex++){
            if(board[0][traverseIndex] == 'O'){
                dfsChange(board, 0, traverseIndex);
            }
            if(board[numRow-1][traverseIndex] == 'O'){
                dfsChange(board, numRow-1, traverseIndex);
            }
        }
        for (traverseIndex = 0;traverseIndex < numRow;traverseIndex++){
            if(board[traverseIndex][0] == 'O'){
                dfsChange(board, traverseIndex, 0);
            }
            if(board[traverseIndex][numColumn - 1] == 'O'){
                dfsChange(board, traverseIndex, numColumn-1);
            }
        }
        
        /* All boarder cases checked. Change all 'O' to 'X' */
        for(int i = 0; i < numRow;i++){
            for (int j=0;j<numColumn;j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                } else if(board[i][j] == '#'){
                    board[i][j] = 'O';
                }
            }
        }
        
    }
};

/******************* Python Solution ***************/
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        # NULL board check
        if not board:
            print("null list")
            return
        # Get the dimension of the board.
        bColumn = len(board[0])
        bRow = len(board)
        
        # Error handling
        if(bColumn == 0 or bRow == 0):
            print("invalid board")
            return
        # Check for row or column size < 2. No scope of change
        if (bColumn < 3 or bRow < 3):
            print("No change possible")
            return
        # Process the border lines and check for connected points.
        visited = set()
        def intermediateUpdate(board: List[List[str]], i:int, j:int, bRow:int, bColumn:int) -> None:
            # Check for the near "O".
            dirn = [[1, 0], [-1, 0], [0, 1], [0, -1]]
            # For loop to check for connected links.
            for k in range(4):
                newX = i + dirn[k][0]
                newY = j + dirn[k][1]
                if(0<= newX < bRow and 0<= newY < bColumn and board[newX][newY] == 'O' and (newX,newY) not in visited):
                    visited.add((newX,newY))
                    board[newX][newY] = '#'
                    intermediateUpdate(board, newX, newY, bRow, bColumn)
        # First and last row
        lastRow = bRow - 1
        for i in range(bColumn):
            if(board[0][i] == 'O' and (0,i) not in visited):
                visited.add((0,i))
                board[0][i] = '#'
                intermediateUpdate(board, 0, i, bRow, bColumn)
            if(board[lastRow][i] == 'O'and (lastRow,i) not in visited):
                visited.add((lastRow,i))
                board[lastRow][i] = '#'
                intermediateUpdate(board, lastRow, i, bRow, bColumn)
        # First  and last Column
        lastColumn = bColumn - 1
        for i in range(bRow):
            if(board[i][0] == 'O' and (i,0) not in visited):
                visited.add((i,0))
                board[i][0] = '#'
                intermediateUpdate(board, i, 0, bRow, bColumn)
            if(board[i][lastColumn] == 'O' and (i, lastColumn) not in visited):
                visited.add((i,lastColumn))
                board[i][lastColumn] = '#'
                intermediateUpdate(board, i, lastColumn, bRow, bColumn)
        # Process the board and convert the 'o' to 'x'
        for i in range(bRow):
            for j in range(bColumn):
                # check for border case.
                #if (0 < i < bRow-1 and 0 < j < bColumn-1 and (board[i][j] == 'O')):
                if (board[i][j] == '#'):
                    board[i][j] = 'O'
                elif (board[i][j] == 'O'):
                    board[i][j] = 'X'
