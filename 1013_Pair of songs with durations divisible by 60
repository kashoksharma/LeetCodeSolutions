You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

 

Example 1:

Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60
Example 2:

Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.
 

Constraints:

1 <= time.length <= 6 * 104
1 <= time[i] <= 500

Hints:
We only need to consider each song length modulo 60.
We can count the number of songs with (length % 60) equal to r, and store that in an array of size 60.

/************************* Approach *****************************************/
Brute Force method:
2 loop to traverse the list and check for combination of divisible by 60.
Demo Python Code:
def numPairsDivisibleBy60(self, time: List[int]) -> int:
    total = 0
    for i, song1 in enumerate(time):
        for j in range(i+1, len(time)):
            if (song1 + time[j]) % 60 == 0:
                total += 1
    return total
    
    Issues:
    As the List is quite big, run-time is not good. Time Complexity: O(n*n).
    
    Optimization:
    As per the Hint 2, We can reduce the size of actual list to contant list of size 60. This will help in improving the performance. Time Complexity: O(n)
    Then, simple task is to get the pair value in array/list with combinations as 1-59, 2-58.....29-31. Check for 0 and 30 index values.
    Consider the case: 
    array[1] = 2 (time as 1, 61) and array[59] = 3 (time as 59, 119, 179). Then, how many combinations can happen.
    1+59, 1+119, 1+179, 61+59, 61+119, 61+179 i.e. 2*3. Use the same logic.
    
    Python Code: 
    def numPairsDivisibleBy60(self, time: List[int]) -> int:
        from collections import Counter
        total = 0
        counts = Counter([x % 60 for x in time]) 
        if 30 in counts:
            total += counts[30] * (counts[30] - 1) / 2
            del counts[30]
        if 0 in counts:
            total += counts[0] * (counts[0] - 1) / 2
            del counts[0]
        
        for i in range(1, 30):
            if i in counts and (60-1) in counts:
                total += counts[i] * counts[60-1]
        return int(total)
        
   
   C++ Code:
   int numPairsDivisibleBy60(vector<int> time) {
	    //group[60] renamed as a[60]
	    int count=0;
	    int a[60]={0};
	    for(int i=0;i<time.size();i++){
	        a[time[i]%60]++;
	    }
	    int i=1,j=59;
	    while(i<j){ //for rules 1-29
	      count+=a[i]*a[j];
	      i++;
	      j--;
	    }

	    //for group[30] and group[0]
	    count+=(a[0]*(a[0]-1)/2)+(a[30]*(a[30]-1)/2);
	
	    return count;
    }
    
