You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

[Solution]
/*********************** Java DP solution *****************/
public int maxProfit(int k, int[] prices) {
    int len = prices.length;

    // Error handling
    if (len < 2 || k <= 0)
        return 0;

    int[][] local = new int[len][k + 1];
    int[][] global = new int[len][k + 1];

    for (int i = 1; i < len; i++) {
        int diff = prices[i] - prices[i - 1];
        for (int j = 1; j <= k; j++) {
            local[i][j] = Math.max(
                    global[i - 1][j - 1] + Math.max(diff, 0),
                    local[i - 1][j] + diff);
            global[i][j] = Math.max(global[i - 1][j], local[i][j]);
        }
    }

    return global[prices.length - 1][k];
}

/******************** C++ Solution *********************/
int maxProfit(int k, vector<int>& prices) {
    // vector size
    int n = prices.size();
    // Error handling
    if (k == 0 || n < 2) return 0;

    // Special case to reduce time.
    if (k > prices.size() / 2) {
        int res = 0;
        for (int i = 1; i < prices.size(); ++i)
            res += max(prices[i] - prices[i - 1], 0);
        return res;
    }

    // Use the DP to solve it
    vector<vector<int>> dp(k + 1, vector<int>(prices.size(), 0));
    for (int i = 1; i <= k; i++) {
        int tmpMax =  -prices[0];
        for (int j = 1; j < prices.size(); j++) {
            dp[i][j] = max(dp[i][j - 1], prices[j] + tmpMax);
            tmpMax =  max(tmpMax, dp[i - 1][j - 1] - prices[j]);
        }
    }

    return dp[k][prices.size() - 1];
}
