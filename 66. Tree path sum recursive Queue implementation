Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

/************************** Recursive solution ***********************************/
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        // Use the Top-down approach, as need to pass the value to confirm for SUM.
        // Cqan't use Bottom-up, as individual node can't confirm for SUM.
        if (!root) return false;
        // Check for the leaf condition and SUM.
        if (root->val == sum && !root->left && !root->right){
            return true;
        }
        // Recursive call for the child nodes
        return (hasPathSum(root->left, sum-root->val) || hasPathSum(root->right, sum-root->val));
    }
};


/************************** Queue Implementation ************************/
/************* Approach ******************/
/* Add all node to a queue and store sum value of each node to another queue. 
   When it is a leaf node, check the stored sum value. */
public class Solution {
public:
    boolean hasPathSum(TreeNode* root, int sum) {
        if(!root) return false;
 
        list<TreeNode*> queue;
        list<int> sumQueue;
 
        queue.push_back(root);
        sumQueue.push_back(root->val);
        
        // pointer to store current node
        TreeNode* curr = nullptr;
        int sumValue = 0;
 
        while(queue.size()){
            curr = queue.front();
            queue.pop_front();
            sumValue = sumQueue.front();
            sumQueue.pop_front();
 
            if(curr->left == nullptr && curr->right == nullptr && sumValue==sum){
                return true;
            }
 
            if(curr->left != nullptr){
                queue.push_back(curr->left);
                sumQueue.push_back(sumValue + curr->left->val);
            }
 
            if(curr.right != null){
                queue.push_back(curr->right);
                sumQueue.push_back(sumValue + curr->right->val);
            }
        }
 
        return false;
    }
}
/************ Queue Implementation have O(N) time complexity while using extra space for 2 queue. S(2N) ~~ S)N).
