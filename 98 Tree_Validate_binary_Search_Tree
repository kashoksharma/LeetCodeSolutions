Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

/************************ C++ Solution ***********************/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        // Recursive call for left node values < root->val. Similar for right node.
        return isValidBSTWithValue(root, LLONG_MIN, LLONG_MAX);
    }
private:
    bool isValidBSTWithValue(TreeNode* root, long minValue, long maxValue){
        if (!root) return true;
        if (root->val <= minValue || root->val >= maxValue)
            return false; 
        return isValidBSTWithValue(root->left, minValue, root->val)
            && isValidBSTWithValue(root->right, root->val, maxValue);
    }
};

/******************************* Java Solution **********************/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root != null && root.left == null && root.right == null){
            return true;
        }
        return isValidBSTWithValue(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    boolean isValidBSTWithValue(TreeNode root, Long minValue, Long maxValue){
        //Integer.MAX_VALUE = 2147483647
        //Integer.MIN_VALUE = -2147483648
        // Test case [-2147483648, null, 2147483647] get failed
        if (root == null) return true;
        if (root.val <= minValue || root.val >= maxValue)
            return false; 
        return isValidBSTWithValue(root.left, minValue, (long)(root.val))
            && isValidBSTWithValue(root.right, (long)(root.val), maxValue);
    }
}

/****************************** Python Solution ******************************/
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        return self.isValidBSTWithValue(root, float('-inf'), float('inf'))
    
    # Internal function to check for sub-trees
    def isValidBSTWithValue(self, root, low, high) -> bool:
        if root is None:
            return True
        
        if root.val <= low or root.val >= high:
            return False
        
        return self.isValidBSTWithValue(root.left, low, root.val) and self.isValidBSTWithValue(root.right, root.val, high)
