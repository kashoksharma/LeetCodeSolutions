Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

Example 2:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

Example 3:
Input: root = [2,1], p = 2, q = 1
Output: 2

Constraints:
The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.

/**********Solution approach ***********/
// root.val > max(p.val, q.val) -- p,q belong to left of Root.
// root.val < min(p.val, q.val) -- p,q belong to right of Root.
// min <= root.val <= max -- LCA between p and q

C++ Solution:
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    int minValue = min(p->val, q->val);
    int maxValue = max(p->val, q->val);
    while (root != NULL){
        if (root->val > maxValue)
            root = root->left;
        else if (root->val < minValue)
            root = root->right;
        else
            return root;
    }
    return NULL;
}

JAVA Solution:
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    int minValue = Math.min(p.val, q.val);
    int maxValue = Math.max(p.val, q.val);
    while (root != null){
        if (root.val > maxValue)
            root = root.left;
        else if (root.val < minValue)
            root = root.right;
        else
            return root;
    }
    return null;
}

Python Solution:
def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
    minValue = min(p.val, q.val)
    maxValue = max(p.val, q.val)
    while root:
        if root.val > maxValue:
            root = root.left
        elif root.val < minValue:
            root = root.right
        else:
            return root
    return None
    
 JavaScript Solution:
 var lowestCommonAncestor = function(root, p, q) {
    let minValue = Math.min(p.val, q.val);
    let maxValue = Math.max(p.val, q.val);
    while (root != null){
        if (root.val > maxValue)
            root = root.left;
        else if (root.val < minValue)
            root = root.right;
        else
            return root;
    }
    return null;
};
